package db_template

type RepositoryTemplate interface {
	GetTemplate() string
}

type Mysql struct {
}

type TemplateParams struct {
	StoreName        string
	EntityType       string
	EntityScans      string
	EntityIdType     string
	FindById         string
	ModelPackage     string
	DestinatePackage string
	FindAll          string
}

func NewMysqlTemplate() RepositoryTemplate {
	return Mysql{}
}

func (template Mysql) GetTemplate() string {
	return repoTemplate
}

var repoTemplate = `
// Generated by sqlgogen; DO NOT EDIT

package {{.DestinatePackage}}

import (
	"database/sql"

	models "{{.ModelPackage}}"
)

type {{.StoreName}} struct {
	DB sql.DB
}

func (repo *{{.StoreName}}) Save(entity models.{{.EntityType}}) (*models.{{.EntityType}}, error) {

	
	return nil, nil
}

func (repo *{{.StoreName}}) FindById(id {{.EntityIdType}}) (*models.{{.EntityType}}, error) {

	row := repo.DB.QueryRow("{{.FindById}}", id)

	return scan{{.EntityType}}(row)
}

func (repo *{{.StoreName}}) FindAll() ([]models.{{.EntityType}}, error) {

	rows, err := repo.DB.Query("{{.FindAll}}")

	if err != nil {
		return nil, err
	}

	return scan{{.EntityType}}List(rows)
}

func scan{{.EntityType}}(row *sql.Row) (*models.{{.EntityType}}, error) {
	var entity models.{{.EntityType}}
	err := row.Scan({{.EntityScans}})
	
	if err != nil {
		return nil, err
	}

	return &entity, nil
}

func scan{{.EntityType}}List(rows *sql.Rows) ([]models.{{.EntityType}}, error) {

	var entities = []models.{{.EntityType}}{}
	for rows.Next() {
		var entity models.{{.EntityType}}
		err := rows.Scan({{.EntityScans}})
		if err != nil {
			return nil, err
		}
		entities = append(entities, entity)
	}

	return entities, nil
}

`
